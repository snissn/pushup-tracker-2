import type { IncomingMessage, ServerResponse } from 'http';
import { Socket } from 'net';

export const createIncomingRequestMock = (
  req?: Partial<IncomingMessage>
): IncomingMessage => {
  const socket = new Socket();

  return {
    _destroy: jest.fn(),
    _read: jest.fn(),
    aborted: false,
    addListener: jest.fn(),
    complete: false,
    connection: socket,
    destroy: jest.fn(),
    destroyed: false,
    emit: jest.fn(),
    eventNames: jest.fn(),
    getMaxListeners: jest.fn(),
    headers: {},
    httpVersion: '1.1',
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    isPaused: jest.fn(),
    listenerCount: jest.fn(),
    listeners: jest.fn(),
    off: jest.fn(),
    on: jest.fn(),
    once: jest.fn(),
    pause: jest.fn(),
    pipe: jest.fn(),
    prependListener: jest.fn(),
    prependOnceListener: jest.fn(),
    push: jest.fn(),
    rawHeaders: [],
    rawListeners: jest.fn(),
    rawTrailers: [],
    read: jest.fn(),
    readable: true,
    readableEncoding: 'utf-8',
    readableEnded: false,
    readableFlowing: null,
    readableHighWaterMark: 0,
    readableLength: 0,
    readableObjectMode: false,
    removeAllListeners: jest.fn(),
    removeListener: jest.fn(),
    resume: jest.fn(),
    setEncoding: jest.fn(),
    setMaxListeners: jest.fn(),
    setTimeout: jest.fn(),
    socket,
    trailers: {},
    unpipe: jest.fn(),
    unshift: jest.fn(),
    wrap: jest.fn(),
    [Symbol.asyncIterator]: () =>
      (jest.fn() as unknown) as AsyncIterableIterator<unknown>,
    ...req,
  };
};

export const createServerResponseMock = (
  res?: Partial<ServerResponse>
): ServerResponse => {
  const socket = new Socket();

  return {
    _destroy: jest.fn(),
    _final: jest.fn(),
    _write: jest.fn(),
    addListener: jest.fn(),
    addTrailers: jest.fn(),
    assignSocket: jest.fn(),
    chunkedEncoding: false,
    connection: socket,
    cork: jest.fn(),
    destroy: jest.fn(),
    destroyed: false,
    detachSocket: jest.fn(),
    emit: jest.fn(),
    end: jest.fn(),
    eventNames: jest.fn(),
    finished: false,
    flushHeaders: jest.fn(),
    getHeader: jest.fn(),
    getHeaderNames: jest.fn(),
    getHeaders: jest.fn(),
    getMaxListeners: jest.fn(),
    hasHeader: jest.fn(),
    headersSent: false,
    listenerCount: jest.fn(),
    listeners: jest.fn(),
    off: jest.fn(),
    on: jest.fn(),
    once: jest.fn(),
    pipe: jest.fn(),
    prependListener: jest.fn(),
    prependOnceListener: jest.fn(),
    rawListeners: jest.fn(),
    removeAllListeners: jest.fn(),
    removeHeader: jest.fn(),
    removeListener: jest.fn(),
    sendDate: false,
    setDefaultEncoding: jest.fn(),
    setHeader: jest.fn(),
    setMaxListeners: jest.fn(),
    setTimeout: jest.fn(),
    shouldKeepAlive: false,
    socket,
    statusCode: 200,
    statusMessage: 'OK',
    uncork: jest.fn(),
    upgrading: false,
    useChunkedEncodingByDefault: false,
    writable: true,
    writableCorked: 0,
    writableEnded: false,
    writableFinished: false,
    writableHighWaterMark: 0,
    writableLength: 0,
    writableObjectMode: true,
    write: jest.fn(),
    writeContinue: jest.fn(),
    writeHead: jest.fn().mockImplementation(() => ({
      end: jest.fn(),
    })),
    writeProcessing: jest.fn(),
    ...res,
  };
};
